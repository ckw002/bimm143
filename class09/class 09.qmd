---
title: "Class 9: Structural Bioinformatics pt. 1"
author: "Chloe Wong (PID: A16893383)"
format: pdf
---

The main database for structural data is called the PDB (Protein Data Bank). Let's see what it contains:

Data from alternate link: https://tinyurl.com/pdbstats24

Read this into R

```{r}
pdbdb <- read.csv("pdb_stats.csv")
pdbdb
```

and answer the following questions: 

> Q1: What percentage of structures in the PDB are solved by X-Ray and Electron Microscopy.

(answered below)

```{r}
pdbdb$Total
```

I need to remove the comma and convert to numeric to do math: 

```{r}
as.numeric( sub(",","", pdbdb$Total))
```

I could turn this into a function to fic the whole table or any future table I read like this: 

```{r}
x <- pdbdb$Total
as.numeric (sub(",", "", x))
```

```{r}
comma2numeric <- function(x) {
  as.numeric(sub(",", "", x))
}
```

Test it 

```{r}
comma2numeric(pdbdb$X.ray)
```

```{r}
apply(pdbdb, 2, comma2numeric)
```

## Or try a different read/import function 

```{r}
#/ message: false
library(readr)
pdbdb <- read_csv("pdb_Stats.csv")
```

```{r}
sum(pdbdb$Total)
```

> Q1: What percentage of structures in the PDB are solved by X-Ray and Electron Microscopy.

```{r}
sum(pdbdb$`X-ray`)/sum(pdbdb$Total) * 100
```

```{r}
sum(pdbdb$EM)/sum(pdbdb$Total) * 100
```

> Q2: What proportion of structures in the PDB are protein?

```{r}
sum(pdbdb$Total[1])/sum(pdbdb$Total) * 100
```

## Mol*

Mol* (pronounced "molstar") is a new web-based molecular viewer that we will need to learn the basics of here. 

https://molstar.org/viewer/

We will use PDB code: 1HSG

![](1HSG.png)

Some more custom images: 

![The all important catalytic ASP25 amino acids](1HSG 1.png)

![Surface dispaly showing Merk compound in peptide bonding pocket](1HSG (1).png)

![](1HSG2.png)

> Q3: Type HIV in the PDB website search box on the home page and determine how many HIV-1 protease structures are in the current PDB?

2294

> Q4: Water molecules normally have 3 atoms. Why do we see just one atom per water molecule in this structure?

There is just one atom per water molecule, oxygen. in this structure because protein have hydrogen in their structure which is not shown in the image. 

> Q5: There is a critical “conserved” water molecule in the binding site. Can you identify this water molecule? What residue number does this water molecule have

Yes you can identify this water molecule. This water molecule has residue number 324.

> Q6: Generate and save a figure clearly showing the two distinct chains of HIV-protease along with the ligand. You might also consider showing the catalytic residues ASP 25 in each chain and the critical water (we recommend “Ball & Stick” for these side-chains). Add this figure to your Quarto document.
Discussion Topic: Can you think of a way in which indinavir, or even larger ligands and substrates, could enter the binding site?

Images of the figures are shown above. Indinavir or even larger ligands and substrates could enter the binding site through conformational flexibility. Flexible loops in its structure (flap regions) are able to change confirmations to allow ligand to enter the binding site.

##The Bio3D package

The bio3d package allows us to do all sorts of structurl bioinformatics work in R. 

Let's start with howo it can read these PDB files: 

```{r}
library(bio3d)

pdb <- read.pdb("1hsg")
pdb
```

```{r}
attributes(pdb)
```

```{r}
head(pdb$atom)
```

```{r}
pdbseq(pdb)[25]
```

> Q7: How many amino acid residues are there in this pdb object? 

```{r}
sum(pdb$calpha)
```

```{r}
length(pdbseq(pdb))
```


> Q8: Name one of the two non-protein residues? 

HOH and MK1

> Q9: How many protein chains are in this structure? 

2

```{r}
unique(pdb$atom$chain)
```

##Predicting functional motions of a single structure

Let's do a bioinformatics prediction of functional motions- i.e. the movements that one of these molecules needs to make to do its stuff.

```{r}
adk <- read.pdb("6s36")
adk
```


```{r}
#Perform flexibility prediction
m <- nma(adk)

plot(m)
```

Write out multi-model PDB file that we can use to make an animation of the predicted motions. 

```{r}
mktrj(m, file="adk.pdb")
```

I can open this in Mol* to play the trajectory...


##Comparative analysis of protein structures 

```{r}
library(bio3d)
```

Here we will find and analyze all ADK structures in the PDB database. 

We will start with a single database accession id: "1ake_A"

```{r}
id <- "1ake_A"
aa <- get.seq(id)
```

I ran these cmds in the R brain/console

install.packages("BiocManager")
BiocManager::install("msa")

> Q10. Which of the packages above is found only on BioConductor and not CRAN? 

The `msa` packge is from BioConductor. 

> Q13. How many amino acids are in this sequence, i.e. how long is this sequence? 

214 positions.

```{r}
length(aa)
```


```{r}
attributes(aa)
```

```{r}
aa$id
```

```{r}
aa$ali
```

```{r}
aa$call
```

```{r}
ncol(aa$ali)
```

```{r}
#b <- blast.pdb(aa)
```

```{r}
#hits <- plot(b)
```

```{r}
#hits
```

```{r}
#hits$pdb.id
```

```{r}
#head(hits$pdb.id)
```

Pre-calculated results: 

```{r}
hits <- NULL
hits$pdb.id <- c('1AKE_A','6S36_A','6RZE_A','3HPR_A','1E4V_A','5EJE_A','1E4Y_A','3X2S_A','6HAP_A','6HAM_A','4K46_A','3GMT_A','4PZL_A')
```

```{r}
#Download related PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
```

Next we will use the pdbaln() function to align and also optionally fit (i.e. superpose) the identified PDB structures.

```{r}
#Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
```

```{r}
pdbs
```

```{r}
ids <- basename.pdb(pdbs$id)
```

## Principal Component Analysis

```{r}
#Perform PCA
pc.xray <- pca(pdbs)
plot(pc.xray, pc.axes = c(1,2))
```

```{r}
# Calculate RMSD
rd <- rmsd(pdbs)

# Structure-based clustering
hc.rd <- hclust(dist(rd))
grps.rd <- cutree(hc.rd, k=3)

plot(pc.xray, 1:2, col="grey50", bg=grps.rd, pch=21, cex=1)
```

To visualize the major structural variations in the ensemble the function mktrj() can be used to generate a trajectory PDB file by interpolating along a give PC (eigenvector):

```{r}
pc1 <- mktrj(pc.xray, pc=1, file="pc_1.pdb")
```

```{r}
#Plotting results with ggplot2
library(ggplot2)
library(ggrepel)

df <- data.frame(PC1=pc.xray$z[,1], 
                 PC2=pc.xray$z[,2], 
                 col=as.factor(grps.rd),
                 ids=ids)

p <- ggplot(df) + 
  aes(PC1, PC2, col=col, label=ids) +
  geom_point(size=2) +
  geom_text_repel(max.overlaps = 20) +
  theme(legend.position = "none")
p
```

```{r}
uniprot <- 248838887
pdb <- 195619

pdb/uniprot * 100
```






